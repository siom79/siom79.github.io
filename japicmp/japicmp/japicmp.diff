Comparing source compatibility of /tmp/japicmp/japicmp/target/japicmp-0.17.1.jar against /home/mmois/.m2/repository/com/github/siom79/japicmp/japicmp/0.16.0/japicmp-0.16.0.jar
+++  NEW INTERFACE: PUBLIC(+) ABSTRACT(+) STATIC(+) japicmp.JApiCmp$SystemExit  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) void exit(int)
+++  NEW CLASS: PUBLIC(+) STATIC(+) japicmp.JApiCmp$SystemExitDefault  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW INTERFACE: japicmp.JApiCmp$SystemExit
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW CONSTRUCTOR: PUBLIC(+) JApiCmp$SystemExitDefault()
	+++  NEW METHOD: PUBLIC(+) void exit(int)
***! MODIFIED CLASS: PUBLIC ABSTRACT (<- NON_ABSTRACT) japicmp.model.JApiBehavior  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	+++  NEW INTERFACE: japicmp.model.JApiHasGenericTemplates
	***  MODIFIED FIELD: PROTECTED (<- PRIVATE) FINAL japicmp.model.JApiClass jApiClass
	+++* NEW METHOD: PUBLIC(+) ABSTRACT(+) void enhanceGenericTypeToParameters()
	+++  NEW METHOD: PROTECTED(+) void enhanceGenericTypeToParameters(japicmp.model.JApiClass, japicmp.util.Optional<? extends javassist.CtBehavior>, japicmp.util.Optional<? extends javassist.CtBehavior>)
	+++  NEW METHOD: PUBLIC(+) java.util.List<japicmp.model.JApiGenericTemplate> getGenericTemplates()
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlElementWrapper
			+++  NEW ELEMENT: name=genericTemplates (+)
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlElement
			+++  NEW ELEMENT: name=genericTemplate (+)
	+++  NEW METHOD: PUBLIC(+) void setChangeStatus(japicmp.model.JApiChangeStatus)
***  MODIFIED CLASS: PUBLIC japicmp.model.JApiClass  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	+++  NEW INTERFACE: japicmp.model.JApiHasGenericTemplates
	+++  NEW METHOD: PUBLIC(+) java.util.List<japicmp.model.JApiGenericTemplate> getGenericTemplates()
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlElementWrapper
			+++  NEW ELEMENT: name=genericTemplates (+)
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlElement
			+++  NEW ELEMENT: name=genericTemplate (+)
***  MODIFIED ENUM: PUBLIC FINAL japicmp.model.JApiCompatibilityChange  (compatible)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) japicmp.model.JApiCompatibilityChange FIELD_GENERICS_CHANGED
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) japicmp.model.JApiCompatibilityChange CLASS_GENERIC_TEMPLATE_CHANGED
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) japicmp.model.JApiCompatibilityChange CLASS_GENERIC_TEMPLATE_GENERICS_CHANGED
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) japicmp.model.JApiCompatibilityChange METHOD_RETURN_TYPE_GENERICS_CHANGED
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) japicmp.model.JApiCompatibilityChange METHOD_PARAMETER_GENERICS_CHANGED
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) japicmp.model.JApiCompatibilityChange METHOD_MOVED_TO_SUPERCLASS
***  MODIFIED CLASS: PUBLIC japicmp.model.JApiConstructor  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	+++  NEW METHOD: PUBLIC(+) void enhanceGenericTypeToParameters()
	+++  NEW METHOD: PUBLIC(+) boolean isSourceCompatible()
***  MODIFIED CLASS: PUBLIC japicmp.model.JApiField  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	+++  NEW INTERFACE: japicmp.model.JApiHasGenericTypes
	+++  NEW METHOD: PUBLIC(+) java.util.List<japicmp.model.JApiGenericType> getNewGenericTypes()
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlElementWrapper
			+++  NEW ELEMENT: name=newGenericTypes (+)
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlElement
			+++  NEW ELEMENT: name=newGenericType (+)
	+++  NEW METHOD: PUBLIC(+) java.util.List<japicmp.model.JApiGenericType> getOldGenericTypes()
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlElementWrapper
			+++  NEW ELEMENT: name=oldGenericTypes (+)
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlElement
			+++  NEW ELEMENT: name=oldGenericType (+)
+++  NEW CLASS: PUBLIC(+) japicmp.model.JApiGenericTemplate  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW INTERFACE: japicmp.model.JApiHasChangeStatus
	+++  NEW INTERFACE: japicmp.model.JApiHasGenericTypes
	+++  NEW INTERFACE: japicmp.model.JApiCompatibility
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW CONSTRUCTOR: PUBLIC(+) JApiGenericTemplate(japicmp.model.JApiChangeStatus, java.lang.String, japicmp.util.Optional<java.lang.String>, japicmp.util.Optional<java.lang.String>)
	+++  NEW METHOD: PUBLIC(+) japicmp.model.JApiChangeStatus getChangeStatus()
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlAttribute
			+++  NEW ELEMENT: name=changeStatus (+)
	+++  NEW METHOD: PUBLIC(+) java.util.List<japicmp.model.JApiCompatibilityChange> getCompatibilityChanges()
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlElementWrapper
			+++  NEW ELEMENT: name=compatibilityChanges (+)
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlElement
			+++  NEW ELEMENT: name=compatibilityChange (+)
	+++  NEW METHOD: PUBLIC(+) java.lang.String getName()
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlAttribute
			+++  NEW ELEMENT: name=name (+)
	+++  NEW METHOD: PUBLIC(+) java.util.List<japicmp.model.JApiGenericType> getNewGenericTypes()
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlElementWrapper
			+++  NEW ELEMENT: name=newGenericTypes (+)
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlElement
			+++  NEW ELEMENT: name=newGenericType (+)
	+++  NEW METHOD: PUBLIC(+) java.util.List<japicmp.model.JApiGenericType> getNewInterfaceTypes()
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlElementWrapper
			+++  NEW ELEMENT: name=newInterfaceTypes (+)
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlElement
			+++  NEW ELEMENT: name=newInterfaceType (+)
	+++  NEW METHOD: PUBLIC(+) java.lang.String getNewType()
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlAttribute
			+++  NEW ELEMENT: name=newType (+)
	+++  NEW METHOD: PUBLIC(+) japicmp.util.Optional<java.lang.String> getNewTypeOptional()
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlTransient
	+++  NEW METHOD: PUBLIC(+) java.util.List<japicmp.model.JApiGenericType> getOldGenericTypes()
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlElementWrapper
			+++  NEW ELEMENT: name=oldGenericTypes (+)
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlElement
			+++  NEW ELEMENT: name=oldGenericType (+)
	+++  NEW METHOD: PUBLIC(+) java.util.List<japicmp.model.JApiGenericType> getOldInterfaceTypes()
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlElementWrapper
			+++  NEW ELEMENT: name=oldInterfaceTypes (+)
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlElement
			+++  NEW ELEMENT: name=oldInterfaceType (+)
	+++  NEW METHOD: PUBLIC(+) java.lang.String getOldType()
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlAttribute
			+++  NEW ELEMENT: name=oldType (+)
	+++  NEW METHOD: PUBLIC(+) japicmp.util.Optional<java.lang.String> getOldTypeOptional()
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlTransient
	+++  NEW METHOD: PUBLIC(+) boolean isBinaryCompatible()
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlAttribute
	+++  NEW METHOD: PUBLIC(+) boolean isSourceCompatible()
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlAttribute
	+++  NEW METHOD: PUBLIC(+) java.lang.String toString()
+++  NEW CLASS: PUBLIC(+) japicmp.model.JApiGenericType  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW CONSTRUCTOR: PUBLIC(+) JApiGenericType(java.lang.String, japicmp.model.JApiGenericType$JApiGenericWildCard)
	+++  NEW METHOD: PUBLIC(+) java.util.List<japicmp.model.JApiGenericType> getGenericTypes()
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlElementWrapper
			+++  NEW ELEMENT: name=genericTypes (+)
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlElement
			+++  NEW ELEMENT: name=genericType (+)
	+++  NEW METHOD: PUBLIC(+) japicmp.model.JApiGenericType$JApiGenericWildCard getGenericWildCard()
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlAttribute
			+++  NEW ELEMENT: name=genericWildCard (+)
	+++  NEW METHOD: PUBLIC(+) java.lang.String getType()
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlAttribute
			+++  NEW ELEMENT: name=type (+)
	+++  NEW METHOD: PUBLIC(+) java.lang.String toString()
+++  NEW ENUM: PUBLIC(+) STATIC(+) FINAL(+) japicmp.model.JApiGenericType$JApiGenericWildCard  (compatible)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW INTERFACE: java.lang.Comparable
	+++  NEW INTERFACE: java.io.Serializable
	+++  NEW SUPERCLASS: java.lang.Enum
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) japicmp.model.JApiGenericType$JApiGenericWildCard EXTENDS
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) japicmp.model.JApiGenericType$JApiGenericWildCard SUPER
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) japicmp.model.JApiGenericType$JApiGenericWildCard UNBOUNDED
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) japicmp.model.JApiGenericType$JApiGenericWildCard NONE
	+++  NEW METHOD: PUBLIC(+) STATIC(+) japicmp.model.JApiGenericType$JApiGenericWildCard valueOf(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) japicmp.model.JApiGenericType$JApiGenericWildCard[] values()
+++  NEW INTERFACE: PUBLIC(+) ABSTRACT(+) japicmp.model.JApiHasGenericTemplates  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) java.util.List<japicmp.model.JApiGenericTemplate> getGenericTemplates()
+++  NEW INTERFACE: PUBLIC(+) ABSTRACT(+) japicmp.model.JApiHasGenericTypes  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) java.util.List<japicmp.model.JApiGenericType> getNewGenericTypes()
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) java.util.List<japicmp.model.JApiGenericType> getOldGenericTypes()
***  MODIFIED CLASS: PUBLIC japicmp.model.JApiMethod  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	+++  NEW METHOD: PUBLIC(+) void enhanceGenericTypeToParameters()
	+++  NEW METHOD: PUBLIC(+) boolean isSourceCompatible()
***! MODIFIED CLASS: PUBLIC japicmp.model.JApiParameter  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	+++  NEW INTERFACE: japicmp.model.JApiHasChangeStatus
	+++  NEW INTERFACE: japicmp.model.JApiHasGenericTypes
	+++  NEW INTERFACE: japicmp.model.JApiCompatibility
	---! REMOVED CONSTRUCTOR: PUBLIC(-) JApiParameter(java.lang.String)
	+++  NEW CONSTRUCTOR: PUBLIC(+) JApiParameter(java.lang.String, japicmp.util.Optional<java.lang.String>)
	+++  NEW METHOD: PUBLIC(+) boolean equals(java.lang.Object)
	+++  NEW METHOD: PUBLIC(+) japicmp.model.JApiChangeStatus getChangeStatus()
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlAttribute
			+++  NEW ELEMENT: name=changeStatus (+)
	+++  NEW METHOD: PUBLIC(+) java.util.List<japicmp.model.JApiCompatibilityChange> getCompatibilityChanges()
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlElementWrapper
			+++  NEW ELEMENT: name=compatibilityChanges (+)
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlElement
			+++  NEW ELEMENT: name=compatibilityChange (+)
	+++  NEW METHOD: PUBLIC(+) java.util.List<japicmp.model.JApiGenericType> getNewGenericTypes()
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlElementWrapper
			+++  NEW ELEMENT: name=newGenericTypes (+)
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlElement
			+++  NEW ELEMENT: name=newGenericType (+)
	+++  NEW METHOD: PUBLIC(+) java.util.List<japicmp.model.JApiGenericType> getOldGenericTypes()
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlElementWrapper
			+++  NEW ELEMENT: name=oldGenericTypes (+)
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlElement
			+++  NEW ELEMENT: name=oldGenericType (+)
	+++  NEW METHOD: PUBLIC(+) java.lang.String getTemplateName()
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlAttribute
			+++  NEW ELEMENT: name=templateName (+)
	+++  NEW METHOD: PUBLIC(+) japicmp.util.Optional<java.lang.String> getTemplateNameOptional()
	+++  NEW METHOD: PUBLIC(+) int hashCode()
	+++  NEW METHOD: PUBLIC(+) boolean isBinaryCompatible()
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlAttribute
	+++  NEW METHOD: PUBLIC(+) boolean isSourceCompatible()
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlAttribute
	+++  NEW METHOD: PUBLIC(+) void setTemplateName(japicmp.util.Optional<java.lang.String>)
	+++  NEW METHOD: PUBLIC(+) void setType(java.lang.String)
***  MODIFIED CLASS: PUBLIC japicmp.model.JApiReturnType  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	+++  NEW INTERFACE: japicmp.model.JApiHasGenericTypes
	+++  NEW INTERFACE: japicmp.model.JApiCompatibility
	+++  NEW METHOD: PUBLIC(+) java.util.List<japicmp.model.JApiCompatibilityChange> getCompatibilityChanges()
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlElementWrapper
			+++  NEW ELEMENT: name=compatibilityChanges (+)
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlElement
			+++  NEW ELEMENT: name=compatibilityChange (+)
	+++  NEW METHOD: PUBLIC(+) java.util.List<japicmp.model.JApiGenericType> getNewGenericTypes()
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlElementWrapper
			+++  NEW ELEMENT: name=newGenericTypes (+)
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlElement
			+++  NEW ELEMENT: name=newGenericType (+)
	+++  NEW METHOD: PUBLIC(+) java.util.List<japicmp.model.JApiGenericType> getOldGenericTypes()
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlElementWrapper
			+++  NEW ELEMENT: name=oldGenericTypes (+)
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlElement
			+++  NEW ELEMENT: name=oldGenericType (+)
	+++  NEW METHOD: PUBLIC(+) boolean isBinaryCompatible()
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlAttribute
	+++  NEW METHOD: PUBLIC(+) boolean isSourceCompatible()
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlAttribute
+++  NEW CLASS: PUBLIC(+) japicmp.util.GenericTemplateHelper  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW CONSTRUCTOR: PUBLIC(+) GenericTemplateHelper()
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.List<japicmp.model.JApiGenericTemplate> computeGenericTemplateChanges(japicmp.util.GenericTemplateHelper$SignatureParserCallback)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) boolean haveGenericTemplateInterfacesChanges(java.util.List<japicmp.model.JApiGenericType>, java.util.List<japicmp.model.JApiGenericType>)
+++  NEW INTERFACE: PUBLIC(+) ABSTRACT(+) STATIC(+) japicmp.util.GenericTemplateHelper$SignatureParserCallback  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) boolean isNewPresent()
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) boolean isOldAndNewPresent()
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) boolean isOldPresent()
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) japicmp.util.SignatureParser newSignatureParser()
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) japicmp.util.SignatureParser oldSignatureParser()
***! MODIFIED CLASS: PUBLIC japicmp.util.SignatureParser  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	+++  NEW METHOD: PUBLIC(+) STATIC(+) void copyGenericParameters(japicmp.util.SignatureParser$HasGenericTypes, java.util.List<japicmp.model.JApiGenericType>)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) void copyGenericTypeInterfaces(japicmp.util.SignatureParser$ParsedTemplate, java.util.List<japicmp.model.JApiGenericType>)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) boolean equalGenericTypes(java.util.List<japicmp.model.JApiGenericType>, java.util.List<japicmp.model.JApiGenericType>)
	+++  NEW METHOD: PUBLIC(+) java.util.List<japicmp.model.JApiParameter> getJApiParameters(japicmp.model.JApiClass, japicmp.util.SignatureParser$DiffType)
	===* UNCHANGED METHOD: PUBLIC java.util.List<japicmp.util.SignatureParser$ParsedParameter>(<- <java.lang.String>) getParameters()
	***! MODIFIED METHOD: PUBLIC japicmp.util.SignatureParser$ParsedParameter (<-java.lang.String) getReturnType()
	+++  NEW METHOD: PUBLIC(+) java.util.List<japicmp.util.SignatureParser$ParsedTemplate> getTemplates()
	+++  NEW METHOD: PUBLIC(+) void parse(javassist.CtBehavior)
	+++  NEW METHOD: PUBLIC(+) java.util.List<japicmp.util.SignatureParser$ParsedTemplate> parseTemplatesOfClass(javassist.CtClass)
	===* UNCHANGED METHOD: PUBLIC java.util.List<japicmp.util.SignatureParser$ParsedParameter>(<- <java.lang.String>) parseTypes(java.lang.String)
+++  NEW ENUM: PUBLIC(+) STATIC(+) FINAL(+) japicmp.util.SignatureParser$DiffType  (compatible)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW INTERFACE: java.lang.Comparable
	+++  NEW INTERFACE: java.io.Serializable
	+++  NEW SUPERCLASS: java.lang.Enum
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) japicmp.util.SignatureParser$DiffType NEW_PARAMS
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) japicmp.util.SignatureParser$DiffType OLD_PARAMS
	+++  NEW METHOD: PUBLIC(+) STATIC(+) japicmp.util.SignatureParser$DiffType valueOf(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) japicmp.util.SignatureParser$DiffType[] values()
+++  NEW INTERFACE: PUBLIC(+) ABSTRACT(+) STATIC(+) japicmp.util.SignatureParser$HasGenericTypes  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) java.util.List<japicmp.util.SignatureParser$ParsedParameter> getGenericTypes()
+++  NEW CLASS: PUBLIC(+) STATIC(+) japicmp.util.SignatureParser$ParsedParameter  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW INTERFACE: japicmp.util.SignatureParser$HasGenericTypes
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW CONSTRUCTOR: PUBLIC(+) SignatureParser$ParsedParameter()
	+++  NEW CONSTRUCTOR: PUBLIC(+) SignatureParser$ParsedParameter(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) boolean equals(java.lang.Object)
	+++  NEW METHOD: PUBLIC(+) java.util.List<japicmp.util.SignatureParser$ParsedParameter> getGenericTypes()
	+++  NEW METHOD: PUBLIC(+) japicmp.model.JApiGenericType$JApiGenericWildCard getGenericWildCard()
	+++  NEW METHOD: PUBLIC(+) java.lang.String getType()
	+++  NEW METHOD: PUBLIC(+) int hashCode()
	+++  NEW METHOD: PUBLIC(+) boolean isTemplate()
	+++  NEW METHOD: PUBLIC(+) void setTemplate(boolean)
+++  NEW CLASS: PUBLIC(+) STATIC(+) japicmp.util.SignatureParser$ParsedTemplate  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW INTERFACE: japicmp.util.SignatureParser$HasGenericTypes
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW CONSTRUCTOR: PUBLIC(+) SignatureParser$ParsedTemplate()
	+++  NEW METHOD: PUBLIC(+) java.util.List<japicmp.util.SignatureParser$ParsedParameter> getGenericTypes()
	+++  NEW METHOD: PUBLIC(+) java.util.List<japicmp.util.SignatureParser$ParsedParameter> getInterfaces()
	+++  NEW METHOD: PUBLIC(+) java.lang.String getName()
	+++  NEW METHOD: PUBLIC(+) java.lang.String getType()
