Comparing /home/mmois/.m2/repository/com/github/siom79/japicmp/japicmp/0.6.0/japicmp-0.6.0.jar with /home/mmois/Programmierung/japicmp/target/checkout/japicmp/target/japicmp-0.6.2.jar:
===  UNCHANGED ENUM: PUBLIC STATIC FINAL japicmp.cli.JApiCli$ClassPathMode  (default serialVersionUID changed)
***  MODIFIED CLASS: PUBLIC STATIC japicmp.cli.JApiCli$Compare  (not serializable)
	===  UNCHANGED FIELD: PUBLIC java.lang.String excludes
		***  MODIFIED ANNOTATION: io.airlift.airline.Option
			***  MODIFIED ELEMENT: description=Semicolon separated list of elements to exclude in the form package.Class#classMember, * can be used as wildcard. Annotations are given as FQN starting with @. Examples: mypackage;my.Class;other.Class#method(int,long);foo.Class#field;@my.Annotation. (<- Semicolon separated list of elements to exclude in the form package.Class#classMember, * can be used as wildcard. Examples: mypackage;my.Class;other.Class#method(int,long);foo.Class#field)
			===  UNCHANGED ELEMENT: name=-e,--exclude
	===  UNCHANGED FIELD: PUBLIC java.lang.String includes
		***  MODIFIED ANNOTATION: io.airlift.airline.Option
			***  MODIFIED ELEMENT: description=Semicolon separated list of elements to include in the form package.Class#classMember, * can be used as wildcard. Annotations are given as FQN starting with @. Examples: mypackage;my.Class;other.Class#method(int,long);foo.Class#field;@my.Annotation. (<- Semicolon separated list of elements to include in the form package.Class#classMember, * can be used as wildcard. Examples: mypackage;my.Class;other.Class#method(int,long);foo.Class#field)
			===  UNCHANGED ELEMENT: name=-i,--include
	+++  NEW FIELD: PUBLIC(+) boolean noAnnotations
		+++  NEW ANNOTATION: io.airlift.airline.Option
			+++  NEW ELEMENT: description=Do not evaluate annotations. (+)
			+++  NEW ELEMENT: name=--no-annotations (+)
***! MODIFIED CLASS: PUBLIC japicmp.cmp.JarArchiveComparatorOptions  (not serializable)
	+++  NEW METHOD: PUBLIC(+) boolean isNoAnnotations()
	---! REMOVED METHOD: PUBLIC(-) void setFilters(japicmp.filter.Filters)
	+++  NEW METHOD: PUBLIC(+) void setNoAnnotations(boolean)
===  UNCHANGED ENUM: PUBLIC STATIC FINAL japicmp.cmp.JarArchiveComparatorOptions$ClassPathMode  (default serialVersionUID changed)
***  MODIFIED CLASS: PUBLIC japicmp.config.Options  (not serializable)
	+++  NEW METHOD: PUBLIC(+) boolean isNoAnnotations()
	+++  NEW METHOD: PUBLIC(+) void setNoAnnotations(boolean)
***! MODIFIED CLASS: PUBLIC japicmp.exception.JApiCmpException  (compatible)
	---! REMOVED METHOD: PUBLIC(-) STATIC(-) japicmp.exception.JApiCmpException forClassLoading(javassist.NotFoundException, java.lang.String, japicmp.cmp.JarArchiveComparator)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) japicmp.exception.JApiCmpException forClassLoading(java.lang.Exception, java.lang.String, japicmp.cmp.JarArchiveComparator)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) japicmp.exception.JApiCmpException forClassLoading(java.lang.Exception, java.lang.String)
===  UNCHANGED ENUM: PUBLIC STATIC FINAL japicmp.exception.JApiCmpException$Reason  (default serialVersionUID changed)
+++  NEW CLASS: PUBLIC(+) japicmp.filter.AnnotationBehaviorFilter  (not serializable)
	+++  NEW INTERFACE: japicmp.filter.BehaviorFilter
	+++  NEW SUPERCLASS: japicmp.filter.AnnotationFilterBase
	+++  NEW CONSTRUCTOR: PUBLIC(+) AnnotationBehaviorFilter(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) boolean matches(javassist.CtBehavior)
	+++  NEW METHOD: PUBLIC(+) java.lang.String toString()
+++  NEW CLASS: PUBLIC(+) japicmp.filter.AnnotationClassFilter  (not serializable)
	+++  NEW INTERFACE: japicmp.filter.ClassFilter
	+++  NEW SUPERCLASS: japicmp.filter.AnnotationFilterBase
	+++  NEW CONSTRUCTOR: PUBLIC(+) AnnotationClassFilter(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) boolean matches(javassist.CtClass)
	+++  NEW METHOD: PUBLIC(+) java.lang.String toString()
+++  NEW CLASS: PUBLIC(+) japicmp.filter.AnnotationFieldFilter  (not serializable)
	+++  NEW INTERFACE: japicmp.filter.FieldFilter
	+++  NEW SUPERCLASS: japicmp.filter.AnnotationFilterBase
	+++  NEW CONSTRUCTOR: PUBLIC(+) AnnotationFieldFilter(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) boolean matches(javassist.CtField)
	+++  NEW METHOD: PUBLIC(+) java.lang.String toString()
+++  NEW CLASS: PUBLIC(+) japicmp.filter.AnnotationFilterBase  (not serializable)
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW FIELD: PROTECTED(+) FINAL(+) java.lang.String annotationClassName
	+++  NEW CONSTRUCTOR: PUBLIC(+) AnnotationFilterBase(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) java.lang.String getClassName()
	+++  NEW METHOD: PROTECTED(+) boolean hasAnnotation(java.util.List)
***! MODIFIED INTERFACE (<- CLASS) : PUBLIC ABSTRACT (<- NON_ABSTRACT) japicmp.filter.BehaviorFilter  (not serializable)
	---! REMOVED CONSTRUCTOR: PUBLIC(-) BehaviorFilter(java.lang.String)
	---! REMOVED METHOD: PUBLIC(-) boolean matches(javassist.CtClass)
	***! MODIFIED METHOD: PUBLIC ABSTRACT (<- NON_ABSTRACT) boolean matches(javassist.CtBehavior)
	---! REMOVED METHOD: PUBLIC(-) boolean matches(javassist.CtField)
	---  REMOVED METHOD: PUBLIC(-) java.lang.String toString()
***! MODIFIED INTERFACE (<- CLASS) : PUBLIC ABSTRACT (<- NON_ABSTRACT) japicmp.filter.ClassFilter  (not serializable)
	---! REMOVED CONSTRUCTOR: PUBLIC(-) ClassFilter(java.lang.String)
	***! MODIFIED METHOD: PUBLIC ABSTRACT (<- NON_ABSTRACT) boolean matches(javassist.CtClass)
	---! REMOVED METHOD: PUBLIC(-) boolean matches(javassist.CtBehavior)
	---! REMOVED METHOD: PUBLIC(-) boolean matches(javassist.CtField)
	---  REMOVED METHOD: PUBLIC(-) java.lang.String toString()
***! MODIFIED INTERFACE (<- CLASS) : PUBLIC ABSTRACT (<- NON_ABSTRACT) japicmp.filter.FieldFilter  (not serializable)
	---! REMOVED CONSTRUCTOR: PUBLIC(-) FieldFilter(java.lang.String)
	---! REMOVED METHOD: PUBLIC(-) boolean matches(javassist.CtClass)
	---! REMOVED METHOD: PUBLIC(-) boolean matches(javassist.CtBehavior)
	***! MODIFIED METHOD: PUBLIC ABSTRACT (<- NON_ABSTRACT) boolean matches(javassist.CtField)
	---  REMOVED METHOD: PUBLIC(-) java.lang.String toString()
***! MODIFIED INTERFACE: PUBLIC ABSTRACT japicmp.filter.Filter  (not serializable)
	---! REMOVED METHOD: PUBLIC(-) ABSTRACT(-) boolean matches(javassist.CtClass)
	---! REMOVED METHOD: PUBLIC(-) ABSTRACT(-) boolean matches(javassist.CtBehavior)
	---! REMOVED METHOD: PUBLIC(-) ABSTRACT(-) boolean matches(javassist.CtField)
+++  NEW CLASS: PUBLIC(+) japicmp.filter.JavadocLikeBehaviorFilter  (not serializable)
	+++  NEW INTERFACE: japicmp.filter.BehaviorFilter
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW CONSTRUCTOR: PUBLIC(+) JavadocLikeBehaviorFilter(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) boolean matches(javassist.CtBehavior)
	+++  NEW METHOD: PUBLIC(+) java.lang.String toString()
+++  NEW CLASS: PUBLIC(+) japicmp.filter.JavaDocLikeClassFilter  (not serializable)
	+++  NEW INTERFACE: japicmp.filter.ClassFilter
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW CONSTRUCTOR: PUBLIC(+) JavaDocLikeClassFilter(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) boolean matches(javassist.CtClass)
	+++  NEW METHOD: PUBLIC(+) java.lang.String toString()
+++  NEW CLASS: PUBLIC(+) japicmp.filter.JavadocLikeFieldFilter  (not serializable)
	+++  NEW INTERFACE: japicmp.filter.FieldFilter
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW CONSTRUCTOR: PUBLIC(+) JavadocLikeFieldFilter(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) boolean matches(javassist.CtField)
	+++  NEW METHOD: PUBLIC(+) java.lang.String toString()
+++  NEW CLASS: PUBLIC(+) japicmp.filter.JavadocLikePackageFilter  (not serializable)
	+++  NEW INTERFACE: japicmp.filter.ClassFilter
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW CONSTRUCTOR: PUBLIC(+) JavadocLikePackageFilter(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) boolean matches(javassist.CtClass)
	+++  NEW METHOD: PUBLIC(+) java.lang.String toString()
---! REMOVED CLASS: PUBLIC(-) japicmp.filter.PackageFilter  (not serializable)
	---! REMOVED INTERFACE: japicmp.filter.Filter
	---! REMOVED SUPERCLASS: java.lang.Object
	---! REMOVED CONSTRUCTOR: PUBLIC(-) PackageFilter(java.lang.String)
	---! REMOVED METHOD: PUBLIC(-) boolean matches(javassist.CtClass)
	---! REMOVED METHOD: PUBLIC(-) boolean matches(javassist.CtBehavior)
	---! REMOVED METHOD: PUBLIC(-) boolean matches(javassist.CtField)
	---! REMOVED METHOD: PUBLIC(-) java.lang.String toString()
===  UNCHANGED ENUM: PUBLIC FINAL japicmp.model.AbstractModifier  (default serialVersionUID changed)
===  UNCHANGED ENUM: PUBLIC FINAL japicmp.model.AccessModifier  (default serialVersionUID changed)
===  UNCHANGED ENUM: PUBLIC FINAL japicmp.model.BridgeModifier  (default serialVersionUID changed)
===  UNCHANGED ENUM: PUBLIC FINAL japicmp.model.FinalModifier  (default serialVersionUID changed)
===  UNCHANGED ENUM: PUBLIC STATIC FINAL japicmp.model.JApiAnnotationElementValue$Type  (default serialVersionUID changed)
***! MODIFIED CLASS: PUBLIC japicmp.model.JApiBehavior  (not serializable)
	+++  NEW INTERFACE: japicmp.model.JApiHasLineNumber
	---! REMOVED CONSTRUCTOR: PUBLIC(-) JApiBehavior(java.lang.String, com.google.common.base.Optional, com.google.common.base.Optional, japicmp.model.JApiChangeStatus)
	+++  NEW CONSTRUCTOR: PUBLIC(+) JApiBehavior(java.lang.String, com.google.common.base.Optional, com.google.common.base.Optional, japicmp.model.JApiChangeStatus, japicmp.cmp.JarArchiveComparatorOptions)
	+++  NEW METHOD: PUBLIC(+) com.google.common.base.Optional geNewLineNumber()
	+++  NEW METHOD: PUBLIC(+) java.lang.String getNewLineNumberAsString()
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlAttribute
			+++  NEW ELEMENT: name=newLineNumber (+)
	+++  NEW METHOD: PUBLIC(+) com.google.common.base.Optional getOldLineNumber()
	+++  NEW METHOD: PUBLIC(+) java.lang.String getOldLineNumberAsString()
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlAttribute
			+++  NEW ELEMENT: name=oldLineNumber (+)
===  UNCHANGED ENUM: PUBLIC FINAL japicmp.model.JApiChangeStatus  (default serialVersionUID changed)
===  UNCHANGED ENUM: PUBLIC STATIC FINAL japicmp.model.JApiClassType$ClassType  (default serialVersionUID changed)
***! MODIFIED CLASS: PUBLIC japicmp.model.JApiConstructor  (not serializable)
	---! REMOVED CONSTRUCTOR: PUBLIC(-) JApiConstructor(java.lang.String, japicmp.model.JApiChangeStatus, com.google.common.base.Optional, com.google.common.base.Optional)
	+++  NEW CONSTRUCTOR: PUBLIC(+) JApiConstructor(java.lang.String, japicmp.model.JApiChangeStatus, com.google.common.base.Optional, com.google.common.base.Optional, japicmp.cmp.JarArchiveComparatorOptions)
***! MODIFIED CLASS: PUBLIC japicmp.model.JApiField  (not serializable)
	---! REMOVED CONSTRUCTOR: PUBLIC(-) JApiField(japicmp.model.JApiChangeStatus, com.google.common.base.Optional, com.google.common.base.Optional)
	+++  NEW CONSTRUCTOR: PUBLIC(+) JApiField(japicmp.model.JApiChangeStatus, com.google.common.base.Optional, com.google.common.base.Optional, japicmp.cmp.JarArchiveComparatorOptions)
+++  NEW INTERFACE: PUBLIC(+) ABSTRACT(+) japicmp.model.JApiHasLineNumber  (not serializable)
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) com.google.common.base.Optional geNewLineNumber()
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) com.google.common.base.Optional getOldLineNumber()
===  UNCHANGED ENUM: PUBLIC STATIC FINAL japicmp.model.JApiJavaObjectSerializationCompatibility$JApiJavaObjectSerializationChangeStatus  (default serialVersionUID changed)
***! MODIFIED CLASS: PUBLIC japicmp.model.JApiMethod  (not serializable)
	---! REMOVED CONSTRUCTOR: PUBLIC(-) JApiMethod(java.lang.String, japicmp.model.JApiChangeStatus, com.google.common.base.Optional, com.google.common.base.Optional)
	+++  NEW CONSTRUCTOR: PUBLIC(+) JApiMethod(java.lang.String, japicmp.model.JApiChangeStatus, com.google.common.base.Optional, com.google.common.base.Optional, japicmp.cmp.JarArchiveComparatorOptions)
===  UNCHANGED ENUM: PUBLIC FINAL japicmp.model.StaticModifier  (default serialVersionUID changed)
===  UNCHANGED ENUM: PUBLIC FINAL japicmp.model.SyntheticAttribute  (default serialVersionUID changed)
===  UNCHANGED ENUM: PUBLIC FINAL japicmp.model.SyntheticModifier  (default serialVersionUID changed)
===  UNCHANGED ENUM: PUBLIC FINAL japicmp.model.TransientModifier  (default serialVersionUID changed)
***! MODIFIED CLASS: PUBLIC japicmp.output.semver.SemverOut  (not serializable)
	***! MODIFIED METHOD: PUBLIC java.lang.String (<-java.lang.Void) generate()
	---! REMOVED METHOD: PUBLIC(-) java.lang.String value()
***  MODIFIED CLASS: PUBLIC japicmp.output.xml.model.JApiCmpXmlRoot  (not serializable)
	+++  NEW METHOD: PUBLIC(+) java.lang.String getSemanticVersioning()
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlAttribute
	+++  NEW METHOD: PUBLIC(+) java.lang.String getTitle()
		+++  NEW ANNOTATION: javax.xml.bind.annotation.XmlAttribute
	+++  NEW METHOD: PUBLIC(+) void setSemanticVersioning(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) void setTitle(java.lang.String)
***  MODIFIED CLASS: PUBLIC japicmp.output.xml.XmlOutputGenerator  (not serializable)
	===  UNCHANGED CONSTRUCTOR: PUBLIC XmlOutputGenerator(java.util.List, japicmp.config.Options, boolean)
		+++  NEW ANNOTATION: java.lang.Deprecated
	+++  NEW CONSTRUCTOR: PUBLIC(+) XmlOutputGenerator(java.util.List, japicmp.config.Options, japicmp.output.xml.XmlOutputGeneratorOptions)
+++  NEW CLASS: PUBLIC(+) japicmp.output.xml.XmlOutputGeneratorOptions  (not serializable)
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW CONSTRUCTOR: PUBLIC(+) XmlOutputGeneratorOptions()
	+++  NEW METHOD: PUBLIC(+) java.lang.String getSemanticVersioningInformation()
	+++  NEW METHOD: PUBLIC(+) com.google.common.base.Optional getTitle()
	+++  NEW METHOD: PUBLIC(+) boolean isCreateSchemaFile()
	+++  NEW METHOD: PUBLIC(+) void setCreateSchemaFile(boolean)
	+++  NEW METHOD: PUBLIC(+) void setSemanticVersioningInformation(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) void setTitle(java.lang.String)
***! MODIFIED CLASS: PUBLIC japicmp.util.AnnotationHelper  (not serializable)
	---! REMOVED METHOD: PUBLIC(-) STATIC(-) void computeAnnotationChanges(java.util.List, com.google.common.base.Optional, com.google.common.base.Optional, japicmp.util.AnnotationHelper$AnnotationsAttributeCallback)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) void computeAnnotationChanges(java.util.List, com.google.common.base.Optional, com.google.common.base.Optional, japicmp.cmp.JarArchiveComparatorOptions, japicmp.util.AnnotationHelper$AnnotationsAttributeCallback)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) boolean hasAnnotation(javassist.bytecode.ClassFile, java.lang.String)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) boolean hasAnnotation(java.util.List, java.lang.String)
